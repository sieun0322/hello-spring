컨테이너 가상화

가상화 : 플랫폼/리소스 가상화

하이퍼바이저(VMM) : 다수의 운영체제를 동시에 실행하기 위한 논리적 플랫폼

종류: Native or Bare-metal/Hosted

운영체제 가상화 : Host OS 위에 Guest OS 전체를 가상화

ex) VMWare, VirtualBox

자유도가 높으나, 시스템 부하가 많고 느려짐

중복적인 리소스 비효율적

컨테이너 가상화 : Host OS 리소스를 사용, 프로세스 실행

최소한의 라이브러리와 도구 포함

컨테이너 생성 속도 빠름

Hypervisor와 Guest OS대신 Docker Engine



Container Image

: container 실행에 필요한 설정 값

container : Image 의 실체화

Public Registry(docker hub) : Mysql
Private Registry: Spring boot
Docker Host : local DB에 이미지 저장(pull)

create, start, run(pull, create, start)

Dockerfile

:docker Image 를 생성하기 위한 스크립트 파일

자체 DSL 언어 사용

FROM/ENV/ADD/EXPOSE/CMD

Docker desktop 설치

https://www.docker.com/products/docker-desktop

쿠버네티스 : 컨테이너 운용을 위한 기술

미니큐브 :싱글로드



docker info

docker image ls

docker container ls

docker run [options] image[:tag|@digest][command][arg...]



hub.docker.com

#이미지 다운로드
$docker pull ubuntu:16.04

#이미지 검색
$docker images | grep ubuntu

#이미지 실행
$docker run ubuntu:16.04

#실행 컨테이너 검색

$docker container ls -a
$docker ps -a

#컨테이너 삭제
docker container rm [containerId]

#Mysql 컨테이너 실행

$ docker run -d -p 3306:3306 -e MYSQL_ALLOW_EMPTY_PASSWORD=true --name mariadb mariadb:latest
docker logs mariadb

docker pull mysql:5.7

#실행
docker exec -it mariadb /bin/bash

#로그인
mysql -uroot -p -h127.0.0.1

#실행 정지
docker start/stop [container]

#컴파일(테스트 파일 제외)
mvn clean compile package -DskipTests=true

#User 마이크로서비스 이미지 생성

$ docker  build  -t  [HUBDOCKERID]/users-service:1.0  .

$ docker push [HUBDOCKERID]/user-service:1.0

$ docker pull [HUBDOCKERID]/user-service:1.0

#도커 전체 삭제
docker system prune


##도커 네트워크 설정
-명령어 검색
docker network ls

docker network create --gateway 172.18.0.1 --subnet 172.18.0.0/16 ecommerce-network
docker network ls

docker network inspect ecommerce-network

일반적인 컨테이너는 각각 ip address 를 가진다.
어떠한 환경에서 ip가 변경 될 경우, 모든 설정을 바꾸어야 한다.

같은 네트워크를 가질 경우, ip address가 변경되어도, 컨테이너 이름으로 연결 가능하다.
때문에 가상의 네트워크를 설정해야 한다.



